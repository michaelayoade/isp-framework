# Docker Compose configuration for ISP Framework with SSL/HTTPS support
# Use this for production deployment with SSL certificates

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: isp-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - isp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: isp-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - isp-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3-compatible storage with SSL
  minio:
    image: minio/minio:latest
    container_name: isp-minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER: "on"
    volumes:
      - minio_data:/data
      - ./ssl/minio:/etc/ssl/minio:ro  # Mount SSL certificates for MinIO
    command: server /data --console-address ":9001" --certs-dir /etc/ssl/minio
    networks:
      - isp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client for bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: isp-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c '
      sleep 10 &&
      mc alias set isp-minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing isp-minio/${MINIO_BUCKET_CUSTOMER_UPLOADS} &&
      mc mb --ignore-existing isp-minio/${MINIO_BUCKET_TICKET_MEDIA} &&
      mc mb --ignore-existing isp-minio/${MINIO_BUCKET_CSV_IMPORTS} &&
      mc mb --ignore-existing isp-minio/${MINIO_BUCKET_BACKUPS} &&
      mc mb --ignore-existing isp-minio/${MINIO_BUCKET_TEMP} &&
      mc policy set download isp-minio/${MINIO_BUCKET_CUSTOMER_UPLOADS} &&
      mc policy set download isp-minio/${MINIO_BUCKET_TICKET_MEDIA} &&
      mc policy set download isp-minio/${MINIO_BUCKET_CSV_IMPORTS} &&
      echo "MinIO buckets created successfully"
      '
    networks:
      - isp-network
    restart: "no"

  # ISP Framework Backend with SSL support
  backend:
    build: ./backend
    container_name: isp-backend
    ports:
      - "${BACKEND_PORT}:8000"      # HTTP port (for development/internal)
      - "${BACKEND_HTTPS_PORT}:8443" # HTTPS port (for production)
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_CUSTOMER_UPLOADS: ${MINIO_BUCKET_CUSTOMER_UPLOADS}
      MINIO_BUCKET_TICKET_MEDIA: ${MINIO_BUCKET_TICKET_MEDIA}
      MINIO_BUCKET_CSV_IMPORTS: ${MINIO_BUCKET_CSV_IMPORTS}
      MINIO_BUCKET_BACKUPS: ${MINIO_BUCKET_BACKUPS}
      MINIO_BUCKET_TEMP: ${MINIO_BUCKET_TEMP}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      REFRESH_TOKEN_EXPIRE_MINUTES: ${REFRESH_TOKEN_EXPIRE_MINUTES}
      SECRETS_BACKEND: ${SECRETS_BACKEND}
      LOG_LEVEL: ${LOG_LEVEL}
      ALLOWED_HOSTS: '["*"]'
      # SSL Configuration
      ENABLE_HTTPS: ${ENABLE_HTTPS:-false}
      SSL_CERT_PATH: ${SSL_CERT_PATH:-/etc/ssl/ispframework/server.crt}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-/etc/ssl/ispframework/server.key}
      FORCE_HTTPS: ${FORCE_HTTPS:-false}
    volumes:
      - ./backend/app:/app/app
      - ./backend/logs:/app/logs
      - ./ssl/backend:/etc/ssl/ispframework:ro  # Mount SSL certificates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - isp-network
    restart: unless-stopped
    command: >
      sh -c "
      if [ \"$ENABLE_HTTPS\" = \"true\" ]; then
        echo 'Starting backend with HTTPS support...';
        python run_https.py;
      else
        echo 'Starting backend with HTTP only...';
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload;
      fi
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for SSL termination (recommended approach)
  nginx:
    image: nginx:alpine
    container_name: isp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl/nginx:/etc/ssl/nginx:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - isp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background worker for file processing
  worker:
    build: ./backend
    container_name: isp-worker
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_CUSTOMER_UPLOADS: ${MINIO_BUCKET_CUSTOMER_UPLOADS}
      MINIO_BUCKET_TICKET_MEDIA: ${MINIO_BUCKET_TICKET_MEDIA}
      MINIO_BUCKET_CSV_IMPORTS: ${MINIO_BUCKET_CSV_IMPORTS}
      MINIO_BUCKET_BACKUPS: ${MINIO_BUCKET_BACKUPS}
      MINIO_BUCKET_TEMP: ${MINIO_BUCKET_TEMP}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      LOG_LEVEL: ${LOG_LEVEL}
    volumes:
      - ./backend/app:/app/app
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - isp-network
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info

  # Celery beat scheduler
  scheduler:
    build: ./backend
    container_name: isp-scheduler
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_CUSTOMER_UPLOADS: ${MINIO_BUCKET_CUSTOMER_UPLOADS}
      MINIO_BUCKET_TICKET_MEDIA: ${MINIO_BUCKET_TICKET_MEDIA}
      MINIO_BUCKET_CSV_IMPORTS: ${MINIO_BUCKET_CSV_IMPORTS}
      MINIO_BUCKET_BACKUPS: ${MINIO_BUCKET_BACKUPS}
      MINIO_BUCKET_TEMP: ${MINIO_BUCKET_TEMP}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      LOG_LEVEL: ${LOG_LEVEL}
    volumes:
      - ./backend/app:/app/app
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - isp-network
    restart: unless-stopped
    command: celery -A app.core.celery beat --loglevel=info

  # FreeRADIUS Server
  freeradius:
    image: freeradius/freeradius-server:latest
    container_name: isp-freeradius
    restart: unless-stopped
    ports:
      - "${RADIUS_AUTH_PORT}:1812/udp"  # RADIUS Authentication
      - "${RADIUS_ACCT_PORT}:1813/udp"  # RADIUS Accounting
    volumes:
      - ./radius-config:/etc/freeradius/3.0
      - ./radius-logs:/var/log/freeradius
    environment:
      - RADIUS_SECRET=${RADIUS_SECRET}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - isp-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  isp-network:
    driver: bridge
