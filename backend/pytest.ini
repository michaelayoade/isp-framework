[tool:pytest]
# Docker-native test configuration for ISP Framework
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Optimized for Docker container execution
addopts = 
    -ra
    -q
    --tb=short
    --strict-markers
    --color=yes
    --disable-warnings
    --maxfail=10

# Environment variables for Docker testing
env =
    PYTHONPATH=/app
    LOG_LEVEL=WARNING
    TESTING=true

# Test markers for selective execution
markers =
    unit: Unit tests with no I/O dependencies
    integration: Integration tests requiring external services (deselect with -m "not integration")
    db: Tests that require database connection
    api: FastAPI endpoint tests requiring full app startup
    slow: Tests that take a long time to run
    
    # Service-specific markers
    rbac: RBAC and permission tests
    billing: Billing system tests
    network: Network management tests
    customer: Customer management tests
    auth: Authentication and authorization tests
    webhook: Webhook integration tests
    device: Device management tests
    automation: Ansible automation tests
    
    # Infrastructure markers
    redis: Tests requiring Redis
    minio: Tests requiring MinIO/S3 storage
    radius: Tests requiring FreeRADIUS
    celery: Tests requiring Celery workers

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:pydantic.*
    ignore::UserWarning:pysnmp.*
    ignore::pytest.PytestUnknownMarkWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore::sqlalchemy.exc.SAWarning

# Test discovery
minversion = 6.0
python_paths = /app


# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */migrations/*
    */__pycache__/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod
