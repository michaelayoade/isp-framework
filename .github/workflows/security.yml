name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi
          pip install bandit safety pip-audit

      - name: Run Bandit Security Scan
        run: |
          bandit -r backend/app -f json -o bandit-report.json -ll || true
          bandit -r backend/app -f txt -ll || true

      - name: Run Safety Vulnerability Scan
        run: |
          safety check --file backend/requirements.txt --json --output safety-report.json || true
          safety check --file backend/requirements.txt || true

      - name: Run pip-audit
        run: |
          pip-audit --requirement backend/requirements.txt --format=json --output=pip-audit-report.json || true
          pip-audit --requirement backend/requirements.txt || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

      - name: Check for Critical Vulnerabilities
        run: |
          # Fail the build if critical vulnerabilities are found
          python -c "
          import json
          import sys
          
          # Check Bandit results
          try:
              with open('bandit-report.json', 'r') as f:
                  bandit_data = json.load(f)
                  high_issues = [issue for issue in bandit_data.get('results', []) if issue.get('issue_severity') == 'HIGH']
                  if high_issues:
                      print(f'❌ Found {len(high_issues)} high-severity security issues in code')
                      sys.exit(1)
          except FileNotFoundError:
              pass
          
          # Check Safety results
          try:
              with open('safety-report.json', 'r') as f:
                  safety_data = json.load(f)
                  if safety_data:
                      print(f'❌ Found {len(safety_data)} dependency vulnerabilities')
                      sys.exit(1)
          except FileNotFoundError:
              pass
          
          print('✅ No critical security issues found')
          "
