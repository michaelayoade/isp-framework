# ISP Framework Code Quality Audit Workflow
# Automated quality gates and comprehensive auditing

name: Code Quality Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive audit weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of audit to run'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - security
          - performance
          - full

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.19.0'
  POSTGRES_DB: isp_framework_test
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password

jobs:
  # Quick quality checks for every commit
  quick-audit:
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event.inputs.audit_type == 'quick'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          if [ -f backend/requirements-dev.txt ]; then pip install -r backend/requirements-dev.txt; fi

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Python linting
        run: |
          ruff check backend/ --output-format=github
          black --check backend/
          isort --check-only backend/

      - name: Run Python type checking
        run: |
          mypy backend/app/ --strict

      - name: Run Frontend linting
        run: |
          cd frontend
          npm run lint
          npm run type-check

      - name: Run quick security scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Upload quick audit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quick-audit-results
          path: |
            bandit-report.json
            safety-report.json

  # Security-focused audit
  security-audit:
    if: github.event.inputs.audit_type == 'security' || github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit detect-secrets
          npm install -g audit-ci

      - name: Run comprehensive security scan
        run: |
          # Python security
          bandit -r backend/ -f json -o security-bandit.json
          safety check --json --output security-safety.json
          pip-audit --format=json --output=security-pip-audit.json
          
          # Secrets detection
          detect-secrets scan --all-files --baseline .secrets.baseline
          
          # Frontend security
          cd frontend && audit-ci --moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            security-*.json
            .secrets.baseline

  # Test coverage and quality
  test-audit:
    if: github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt
          cd frontend && npm ci

      - name: Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=json -v

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml,./frontend/coverage/lcov.info
          flags: backend,frontend
          name: isp-framework-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-audit-results
          path: |
            backend/htmlcov/
            backend/coverage.json
            frontend/coverage/

  # Performance audit
  performance-audit:
    if: github.event.inputs.audit_type == 'performance' || github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance tools
        run: |
          python -m pip install --upgrade pip
          pip install py-spy memory-profiler
          npm install -g autocannon clinic

      - name: Build Docker containers
        run: |
          docker-compose -f docker-compose.yml build

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          # API performance testing
          autocannon -c 10 -d 30 http://localhost:8000/api/v1/health > perf-api.txt
          
          # Memory profiling
          docker exec $(docker-compose ps -q backend) py-spy top --pid 1 --duration 30 > perf-memory.txt

      - name: Stop services
        run: |
          docker-compose down

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-audit-results
          path: |
            perf-*.txt

  # Comprehensive audit report
  comprehensive-audit:
    if: github.event.inputs.audit_type == 'full' || github.event_name == 'schedule'
    needs: [quick-audit, security-audit, test-audit, performance-audit]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install vulture pydocstyle
          chmod +x scripts/audit/run_comprehensive_audit.sh

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Run comprehensive audit
        run: |
          ./scripts/audit/run_comprehensive_audit.sh --output-dir=./comprehensive-audit-results

      - name: Generate executive summary
        run: |
          python scripts/audit/generate_executive_summary.py \
            --input-dir=./comprehensive-audit-results \
            --output=executive-summary.pdf

      - name: Upload comprehensive audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-audit-results
          path: |
            comprehensive-audit-results/
            executive-summary.pdf

      - name: Create audit issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const auditReport = fs.readFileSync('comprehensive-audit-results/audit_report.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Code Quality Audit - ${new Date().toISOString().split('T')[0]}`,
              body: auditReport,
              labels: ['audit', 'quality', 'maintenance']
            });

  # Quality gates
  quality-gates:
    needs: [quick-audit]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download audit results
        uses: actions/download-artifact@v3
        with:
          name: quick-audit-results

      - name: Check quality gates
        run: |
          # Fail if critical security issues found
          if [ -f bandit-report.json ]; then
            CRITICAL_ISSUES=$(jq '.results | map(select(.issue_severity == "HIGH")) | length' bandit-report.json)
            if [ "$CRITICAL_ISSUES" -gt 0 ]; then
              echo "❌ Critical security issues found: $CRITICAL_ISSUES"
              exit 1
            fi
          fi
          
          # Fail if high-severity vulnerabilities found
          if [ -f safety-report.json ]; then
            HIGH_VULNS=$(jq '.vulnerabilities | map(select(.vulnerability.severity == "high")) | length' safety-report.json)
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "❌ High-severity vulnerabilities found: $HIGH_VULNS"
              exit 1
            fi
          fi
          
          echo "✅ All quality gates passed"

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Code Quality Audit Results\n\n';
            
            try {
              const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const issueCount = banditReport.results.length;
              comment += `- **Security Issues**: ${issueCount}\n`;
            } catch (e) {
              comment += '- **Security Issues**: Unable to parse results\n';
            }
            
            comment += '\n📊 Full audit results available in workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
